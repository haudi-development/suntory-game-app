name: Database Migrations

on:
  push:
    paths:
      - 'supabase/migrations/**'
    branches: [main, develop]
  workflow_dispatch:

jobs:
  check-migrations:
    name: Check Database Migrations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Validate migration files
        run: |
          echo "Checking migration files..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating: $file"
              # Basic SQL syntax check
              if ! grep -q "^--" "$file" && ! grep -q "^CREATE\|^ALTER\|^DROP\|^INSERT\|^UPDATE\|^DELETE" "$file"; then
                echo "Warning: $file might not contain valid SQL"
              fi
            fi
          done
      
      - name: List migrations
        run: |
          echo "Migration files:"
          ls -la supabase/migrations/
      
      - name: Check for breaking changes
        run: |
          echo "Checking for potential breaking changes..."
          if grep -r "DROP TABLE\|DROP COLUMN" supabase/migrations/; then
            echo "⚠️ Warning: Breaking changes detected (DROP statements found)"
          fi

  deploy-staging:
    name: Deploy to Staging Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: check-migrations
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Deploy migrations to staging
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
          SUPABASE_PROJECT_ID: ${{ secrets.STAGING_PROJECT_ID }}
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID
          supabase db push --dry-run
          # Remove --dry-run to actually deploy
          # supabase db push

  deploy-production:
    name: Deploy to Production Database
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: check-migrations
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Backup production database
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
        run: |
          echo "Creating backup of production database..."
          # This would typically trigger a backup via Supabase API
          # supabase db dump > backup-$(date +%Y%m%d-%H%M%S).sql
      
      - name: Deploy migrations to production
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
          SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
        run: |
          supabase link --project-ref $SUPABASE_PROJECT_ID
          supabase db push --dry-run
          # Remove --dry-run to actually deploy
          # supabase db push
      
      - name: Verify deployment
        run: |
          echo "Verifying migration deployment..."
          # Add verification logic here